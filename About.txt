-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ [ALL CS AND THEIR USES]-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_

[BodyAnimation.cs]    ->to avatar object

Updating bones position & IK animation from anchors

[FileShareHandler.cs] ->-

Handle downloads and uploads asynchronously. 

[HandshortKey.cs]    ->-

Create hand pose & recognize hand pose. 

[ModifMesh.cs]       ->to 3d object 

Move, rescale, deform mesh & send update msg. 

X[NetMaster.cs]       ->-to RIG?

Connect to &/or create Cyber_Cave room.

[Utils.cs]           ->-

Wrapper to generally used functions.

[AnchorUpdater.cs]   ->to avater object

Update Anchors from RIG data

[RigInput.cs]       -> to RIG object

 Rig Input to function Wrapper

X[DataReceiver.cs]  ->-

 Data received to function Wrapper

 -_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_ [Network sys]-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_-_
 v1.0 . 

 NetBoot.cs
 attached to a gameobject on scene. Execute first connection. 

 NetStream.cs
 attached to all avatars object.
	SendDataToAll()
	SendData()
	SendDataToMaster()
	ReceivedData()

Send and receive data function

MsgWrapper.cs
	

 Node Type: 
	[client] all users 
	[master] referent node which auto write world update . 

How it works at start?
	User connect to room named "Cyber_Cave" and instantiate an avatar. 
	Take knowledge of master node photon.player by pinging him (one byte).
	Do world Update. [The master build new block saves. Build a response message with all block save checksum... Then user will ask files to network. ]

What is the role of Master node ?
	Because users can connect at any time and apply modifications to world by themselves. It is
	important that someone records those modifications. If anyone could be able to write its own version of the game,
	no one could be able to  upload chronologically events to the world in same timeline. This is the role of the master node,
	he is the only one who can be trust for this. When update asking, the master send back a list of files as answer. Then the node
	will ask to anyone a peer list of nodes possessing the file. 

How files upload/download works ?
	User[A] requests a download of a specific file ( 12 & checksum & type of a file), this user knows the length of the file. 
	Getting back a ping (13 & checksum) from all users possessing the files. 
	->User[A] build progressively a list of photon.player which possess the file. 
    ->User[A] build offsets grid depending of peer list count.

	_____________graphics ____________  pow2  offs
	01[>                              ] [1] 0
	02[>             >                ] [2] 0    50
	03[>     >       >                ] [2] 0 25 50
	04[>     >       >         >      ] [4] 0 25 50 75 
	05[>  >  >       >         >      ] [4] 0 12.5 25 50 75
	05[>  >  >  >    >         >      ] [4] 0 12.5 25 37.5 50 75 
	08[>  >  >  >    >    >    >   >  ] [8]

	

	event eg: 
	[>     >       >         >      ] original state
	[>     -       >         >      ] #2 quit			: [e0]get left neightborr of #2 named $L. add length size of $L by  #2 length size
	[>             >         >      ] 
	[>     >       >         >      ] new join			: [e1]Get $R. Get first node which has $R as length size named #X. divide $R by 2 named $D. new will start at #Xoff+$D, length $D. update #X lenwith $D 
	[>  >  >       >         >      ] new join          : e1
	[>  >  >   >   >         >      ] new join			: e1
	[>  >  >   >             >      ] #4 quit			: e0
	[>  >  >   >   >         >      ] new join          : e1

	-> Share in real time cell position to seeder. 
	-> abord dll when its ended. 

How custom model instantiation works?
	
	User can freely spawn custom 3d model or other files like textures. To be able to spawn it, it will first ask master node if it possess the given file. 
	If master don't have the file, you will upload it. You can repeatly ask to master if the file possession its side. 

	If answer is yes, you can spawn it to real world. User which don't have the file will automatically start a file request if they don't have it. 
	There is 2 placeholder object for non-downlaoded model. The first is a missing data image. The other is an autogenerated bitmap with dll progression print into it. 
	The user can repeat request until he has it. When a custom file is 
	














	
